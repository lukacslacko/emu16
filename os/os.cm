struct proc_t {
  int sp;
  int pid;
  pages_t pages;
}

struct pages_t {
  byte page[16];
}

struct all_pages_t {
  byte available[16];
}

struct registers_t {
  int a;
  int b;
  int c;
  int d;
}

static registers_t registers;
static all_pages_t all_pages;
static proc_t* proc;

void init_pages() {
  all_pages.available[0] = 3;
}

bool get_pages(int n_pages) {
  int p;
  int i;
  for (; p<256; ++p) {
    if (n_pages == i) {
      return true;
    }
    byte h = p%8;
    byte l = 1<<(p&7);
    if (available[h] & l > 0) {
      all_pages.available[h] = all_pages.available[h] | l;
      proc.pages[i] = p;
      i++;
    }
  }
  return false;
}

bool free_pages() {
  int i;
  for (; i<16; ++i) {
    byte p = proc.pages[i];
    byte h = p%8;
    byte l = 1<<(p&7);
    all_pages.available[h] = all_pages.available[h] & (~l);
  }
}

void load_pages(pages_t* pages) asm;
