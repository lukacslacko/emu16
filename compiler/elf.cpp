#include <cstdint>
#include <fstream>
#include <iostream>
#include <vector>
using namespace std;

void operator<<(vector<uint8_t> &v, uint8_t i) {
	v.push_back(i);
}

int main() {
	vector<uint8_t> p = {0xbb,0x2a,0x00,0x00,0x00,0xb8,0x01,0x00,0x00,0x00,0xcd,0x80};
	uint32_t addr = 0x08048000;
	uint32_t addrp = addr+0x54;
	uint32_t size = 0x54+p.size();
	vector<uint8_t> v;
	// v.push_back(65);
	// v<<'f';
	v << 0x7f;
	v << 'E';
	v << 'L';
	v << 'F';
	v << 1;
	v << 1;
	v << 1;
	v << 0;
	v << 0;

	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 2;
	v << 0;
	v << 3;
	v << 0;
	v << 1;
	v << 0;
	v << 0;
	v << 0;
	v << (addrp & 0xff);
	v << (addrp >> 8 & 0xff);
	v << (addrp >> 16 & 0xff);
	v << (addrp >> 24);
	v << 0x34;
	v << 0;
	v << 0;
	v << 0;
/*
	uint32_t t = 0x54 + p.size();
	v << (t & 0xff);
	v << (t >> 8 & 0xff);
	v << (t >> 16 & 0xff);
	v << (t >> 24);
*/
    v<<0;
    v<<0;
    v<<0;
    v<<0;

	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 52;
	v << 0;
	v << 0x20;
	v << 0;
	v << 1;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;

	v << 1;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << (addr & 0xff);
	v << (addr >> 8 & 0xff);
	v << (addr >> 16 & 0xff);
	v << (addr >> 24);
	v << (addr & 0xff);
	v << (addr >> 8 & 0xff);
	v << (addr >> 16 & 0xff);
	v << (addr >> 24);
	v << (size & 0xff);
	v << (size >> 8 & 0xff);
	v << (size >> 16 & 0xff);
	v << (size >> 24);
	v << (size & 0xff);
	v << (size >> 8 & 0xff);
	v << (size >> 16 & 0xff);
	v << (size >> 24);
	v << 5;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 16;
	v << 0;
	v << 0;
	for (uint32_t i = 0; i < p.size(); ++i) {
		v << p[i];
	}/*
	v<<0;
	v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
    v<<0;
	
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 1;
	v << 0;
	v << 0;
	v << 0;
	v << 6;
	v << 0;
	v << 0;
	v << 0;
	v << (addr & 0xff);
	v << (addr >> 8 & 0xff);
	v << (addr >> 16 & 0xff);
	v << (addr >> 24);
	v << 0x54;
	v << 0;
	v << 0;
	v << 0;
	v << (p.size() & 0xff);
	v << (p.size() >> 8 & 0xff);
	v << (p.size() >> 16 & 0xff);
	v << (p.size() >> 24);
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 16;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 3;
	v << 0;
	v << 0;
	v << 0;
	v << 0x20;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 9;
	v << 0;
	v << 0;
	v << 0;
	v << 1;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 1;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;
	v << 0;*/
	if (!v.size())
		return 0;
	ofstream fout("a", ios::out | ios::binary);
	fout.write((char *)&v[0], v.size());
	fout.close();
	return 0;
}
